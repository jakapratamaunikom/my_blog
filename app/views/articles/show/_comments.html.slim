aside#comments.comments
  hr
  h2
    i.fa.fa-comments
    |  
    = I18n.t("views.articles.count_comments", quantity: article.count_comments)
  - article.comments.origin.each do |comment|

    article class="comment"
      header.clearfix
        .meta
          h3
            a href="#"  
              = comment.name
          span.date
            = comment.created_at.to_date
          span.separator
            |  -
          = link_to " #{I18n.t("views.comments.reply")}", '#', class: 'reply-link', 'data-id' => comment.id, 'data-type' => 'reply_comment'
      .body
        = comment.content
    
    - comment.nested_comments.each do |child|
      article class="comment reply"
        header.clearfix
          .meta
            h3
              a href="#"  
                = child.name
            span.date
              = child.created_at.to_date
            span.separator
              |  -
            = link_to " #{I18n.t("views.comments.reply")}", '#', class: 'reply-link', 'data-id' => child.id, 'data-type' => 'reply_comment'
        .body
          = child.content
      
aside#create-comment.create-comment
    hr
    h2
      i.fa.fa-heart
      |  
      = I18n.t("views.comments.add_comment")

    = form_for Comment.new, remote: true do |f|
      = f.hidden_field :article_id, value: article.id
      = f.hidden_field :parent_id,  value: nil
      .row
        .col-md-6.js-field-container
          -if user_signed_in? 
            = f.text_field :name, class: 'form-control input-lg', placeholder: I18n.t('views.comments.placeholder.name'), required: true, value: current_user.username, readonly: true
          -else
            = f.text_field :name, class: 'form-control input-lg', placeholder: I18n.t('views.comments.placeholder.name'), required: true
        .col-md-6.js-field-container
          - if user_signed_in?
            = f.email_field :email, class: 'form-control input-lg', placeholder: I18n.t('views.comments.placeholder.email'), value: current_user.email, readonly: true
          - else
            = f.email_field :email, class: 'form-control input-lg', placeholder: I18n.t('views.comments.placeholder.email')
      .row
        .col-md-12.js-field-container
          = f.text_area :content, class: 'form-control input-lg', rows: 5, placeholder: I18n.t('views.comments.placeholder.content'), required: true
      .buttons.clearfix
        a.btn.btn-xlarge.btn-tales-two data-type='clear_form'
          = I18n.t("views.articles.comments.cancel")
        button.btn.btn-xlarge.btn-tales-one type="submit" id="send-comment"
          = I18n.t("views.articles.comments.submit")

.modal.fade id="SignUpModal"
  .modal-header
    button.close data-dismiss="modal"
      | Ã—
    h3
      = I18n.t('views.devise.page_header_reg')
  
  .modal-body
    = form_for(resource, :as => resource_name, :url => registration_path(resource_name)) do |f| 
      = devise_error_messages! 

      .field
        = f.label :email
        br
        = f.email_field :email, autofocus: true 

      .field
        = f.label :username
        br
        = f.text_field :username, autocomplete: "on" 
      br
      = f.submit I18n.t('helpers.submit.devise.sign_up'), :class => 'btn btn-large btn-tales-two'
  .modal-footer
      

coffee:
  $('#send-comment').on "click", ->
    email = $('#comment_email').val()

    if (user_signed_in? || email != '') 
      $.ajax '/users/check_registration',
        type: 'GET',
        dataType: "json",
        data: { email: email }
        success: (data) ->
          if data.empty? 
            $('#SignUpModal').modal('show');
          else
            user = data[0]
            $.ajax '/users/sign_in',
              type: 'POST',
              data: { user: { email: email , password: 'password',  username: user.username } }
              success: (data) ->
                location.reload()
    else 
      $('#SignUpModal').modal('show')
